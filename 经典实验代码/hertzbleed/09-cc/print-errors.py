import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

import numpy as np
import multiprocessing as mp
from collections import namedtuple
import sys


# This code is for the training / offline phase
ParseParams = namedtuple('ParseParams', 'interval offset contention_frac threshold score')
interval = None
result_x = None
result_y = None
SCORE_MAX = 9999999999999

# 8 kB of random bits
RANDOM_PATTERN = False
pattern
patternlen = len(pattern)

# The first 100 intervals are discarded
# The following 8000 intervals are the training set (offline phase)
# The following 8000 intervals are the testing set (online phase)
# NOTE: if RANDOM_PATTERN is True, make sure that the number of train and test intervals is the same as patternlen!
discard_intervals = 100
train_intervals_no = 8000
test_intervals_no = 8000

discard_intv_start = 0
discard_intv_end = discard_intervals
train_intv_start = discard_intervals
train_intv_end = train_intv_start + train_intervals_no
test_intv_start = discard_intervals + train_intervals_no
test_intv_end = test_intv_start + test_intervals_no


def read_from_file(filename):
    result_x = []
    result_y = []

    # Results of all runs are all in the same file
    with open(filename) as f:
        for line in f:
            x, y = line.strip().split()
            result_x.append(int(x))
            result_y.append(int(y))

    return result_x, result_y


def diff_letters(a, b):
    return sum(a[i] != b[i] for i in range(len(a)))


def parse_intervals_into_bits(intervals, threshold, min_contention_frac):

    # Parse the intervals into bits
    # If more than $(min_contention_frac)% of the measurements in an interval
    # are greater than the threshold, then we classify
    # the interval as a 1.
    result = ""
    for _, samples in intervals.items():
        contention = 0
        for sample in samples:
            if sample >= threshold:
                contention += 1
        if contention > min_contention_frac * len(samples):
            result += "1"
        else:
            result += "0"

    return result


def per_offset_worker(parse_params):

    # Parse trace into intervals
    offset = parse_params.offset
    interval = parse_params.interval

    # Prepare training set taking into account the offset for this worker
    cur_interval_no = 0
    train_intervals = {}
    for i in range(len(result_x)):
        x = result_x[i]
        y = result_y[i]
        if ((x + offset) > interval * (cur_interval_no + 1)):
            cur_interval_no += 1

        if (discard_intv_start <= cur_interval_no < discard_intv_end):
            continue
        if (train_intv_start <= cur_interval_no < train_intv_end):
            train_intervals.setdefault(cur_interval_no, []).append(y)
        else:
            break

    # We use the training set to find the best threshold
    # for this interval (offline) and the remaining parsed data
    # to get the error rate (online). We try different thresholds
    # because, depending on the CC interval, the best threshold
    # to use is different (e.g., with larger intervals we can use a
    # lower threshold than with shorter intervals).
    # We try different fractions of contention samples observed (e.g. 10% of
    # the samples must show contention for the bit to be counted as a 1)
    thresholds = range(4000000, 4300000, 10000)  # FIXME: adjust these thresholds for your CPU
    contention_fracs = range(0, 100, 3)  # test from 0.03 to 1.00

    # Save best scores
    best_contention_frac = None
    best_threshold = None
    best_score = SCORE_MAX

    # Test various contention fractions
    for min_contention_frac in contention_fracs:
        for threshold in thresholds:

            # Parse the intervals into bits
            result = parse_intervals_into_bits(train_intervals, threshold, min_contention_frac / 100)

            if RANDOM_PATTERN:
                score = patternlen

                # Find the best offset using the first patternlen intervals
                nppattern = np.array([int(i) for i in pattern])
                npresult = np.array([int(i) for i in result])
                for i in range(patternlen):
                    testing = np.roll(nppattern, i)
                    newscore = np.count_nonzero(testing != npresult)

                    if (newscore < score):
                        score = newscore
            else:
                # Compare these bits with the ground truth
                # The ground truth is either 0101... or 1010...
                candidate_1 = "01" * (len(result) // 2)
                candidate_2 = "10" * (len(result) // 2)

                # Get the number of bit flips between the
                # decoded stream and the (correct) ground truth
                score_1 = diff_letters(result, candidate_1)
                score_2 = diff_letters(result, candidate_2)
                score = min(score_1, score_2)

            # Pick the best score (lowest error)
            if (score < best_score):
                best_threshold = threshold
                best_contention_frac = min_contention_frac / 100
                best_score = score

    return ParseParams(interval, offset, best_contention_frac, best_threshold, best_score)


def main():
    global interval, result_x, result_y

    # Check args
    assert len(sys.argv) == 3, "Specify the files with the results as argument, and the interval"
    result_x, result_y = read_from_file(sys.argv[1])

    interval = int(sys.argv[2])

    # 1 milliseconds is 3 million cycles on our processor
    # FIXME: adjust this with correct base frequency
    samples_per_interval = interval // 3000000

    # Train using different offsets
    pool = mp.Pool(processes=8)
    offsets = range(0, interval // 2, interval // samples_per_interval)
    params = [ParseParams(interval, o, None, None, None) for o in offsets]
    best_params_per_offset = pool.map(per_offset_worker, params)

    # Select the best parameters
    best_params = min(best_params_per_offset, key=lambda x: x.score)
    best_offset = best_params.offset
    best_threshold = best_params.threshold
    best_contention_frac = best_params.contention_frac

    # Generate test set
    cur_interval_no = 0
    test_intervals = {}
    for i in range(len(result_x)):
        x = result_x[i]
        y = result_y[i]
        if ((x + best_offset) > interval * (cur_interval_no + 1)):
            cur_interval_no += 1

        if (test_intv_start <= cur_interval_no < test_intv_end):
            test_intervals.setdefault(cur_interval_no, []).append(y)
        elif cur_interval_no > test_intv_end:
            break
        else:
            continue

    if len(test_intervals) < test_intervals_no:
        print("Not enough test intervals")
        exit(-1)

    print('Best params: {}'.format(best_params))

    # Parse the intervals into bits
    result = parse_intervals_into_bits(test_intervals, best_threshold, best_contention_frac)

    # Check resulting number of errors
    if RANDOM_PATTERN:
        score = SCORE_MAX

        # Find the best offset using the first patternlen intervals
        nppattern = np.array([int(i) for i in pattern])
        npresult = np.array([int(i) for i in result])
        for i in range(patternlen):
            testing = np.roll(nppattern, i)
            newscore = np.count_nonzero(testing != npresult)

            if (newscore < score):
                score = newscore

    else:
        # Compare these bits with the ground truth
        # The ground truth is either 0101... or 1010...
        candidate_1 = "01" * ((len(result) // 2) + 1)
        candidate_2 = "10" * ((len(result) // 2) + 1)

        # Print the number of bit flips between the
        # decoded stream and the (correct) ground truth
        score_1 = diff_letters(result, candidate_1[:len(result)])
        score_2 = diff_letters(result, candidate_2[:len(result)])
        score = min(score_1, score_2)

    print(score, "out of", test_intervals_no, "->", score / test_intervals_no)


if __name__ == "__main__":
    main()
